---
- fail:
    msg: "snapshotfile variable is not set"
  when: snapshotfile is undefined

- fail:
    msg: "goversion variable is not set"
  when: goversion is undefined

- fail:
    msg: "project variable is not set"
  when: project is undefined

- fail:
    msg: "ipprefix variable is not set"
  when: ipprefix is undefined

- fail:
    msg: "hexsha variable is not set"
  when: hexsha is undefined

- name: Create working directory
  set_fact:
    extractor_wd: /tmp/test

- name: Create generated directory
  set_fact:
    generated_wd: "{{ extractor_wd }}/generated"

- include: retrievegostdlib.yml
  vars:
    generated_go_wd: "{{ generated_wd }}"
    goversion: "{{ goversion }}"

- name: Build dependency snapshot
  snapshotbuilder:
    snapshotfile: "{{ snapshotfile }}"
  register: output

- debug: var=output

- include: prepareextractorwd.yml
  vars:
    artefact_prefix: "golang-project"

- name: Create GOPATH directory for the project
  file:
    path: "{{ extractor_wd }}/src/{{ project }}"
    state: directory

- name: Retrieve code from project repository
  repositorycoderetriever:
    repository: "{{ project }}"
    hexsha: "{{ hexsha }}"
    directory: "{{ extractor_wd }}/src/{{ ipprefix }}"
  register: routput

- name: Extract api
  apiextractor:
    gopath: "{{ extractor_wd }}"
    generated: "{{ generated_wd }}"
    package_path: "{{ ipprefix }}"
    hexsha: "{{ hexsha }}"
    depsfile: "{{ snapshotfile }}"
    cgodir: "{{ generated_wd }}/cgo.yml"
    goversion: "{{ goversion }}"
    artefact:
      prefix: golang-project
      key:
        hexsha: "{{ hexsha }}"

  register: eoutput

# https://github.com/ansible/ansible/pull/36307
# Thus, ansible >= 2.5 is needed
# - debug:
#     msg: "golang-project-api: {{ (item['data'] | artefact2json)['qid'] }}"
#   with_items: "{{ eoutput.artefacts['golang-project-api'] }}"
#   loop_control:
#     label: "{{ item['ipprefix'] }}"
#
# - debug:
#     msg: "golang-project-contracts: {{ (item | artefact2json)['ipprefix'] }}"
#   with_items: "{{ eoutput.artefacts['golang-project-contracts'] }}"
#   loop_control:
#     label: "{{ (item | artefact2json)['ipprefix'] }}"
#
# - debug:
#     msg: "golang-project-static-allocations: {{ (item | artefact2json)['ipprefix'] }}"
#   with_items: "{{ eoutput.artefacts['golang-project-static-allocations'] }}"
#   loop_control:
#     label: "{{ (item | artefact2json)['ipprefix'] }}"

# Store all artefacts
- name: Store golang-project-api artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-api'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"

- name: Store golang-project-contracts artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-contracts'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"

- name: Store golang-project-static-allocations artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-static-allocations'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"
