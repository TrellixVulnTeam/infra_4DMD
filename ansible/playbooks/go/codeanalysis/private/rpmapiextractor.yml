---
- fail:
    msg: "goversion variable is not set"
  when: goversion is undefined

- fail:
    msg: "product variable is not set"
  when: product is undefined

- fail:
    msg: "distribution variable is not set"
  when: distribution is undefined

- fail:
    msg: "build variable is not set"
  when: build is undefined

- fail:
    msg: "rpm variable is not set"
  when: rpm is undefined

- name: Retrieve rpm
  rpmretriever:
    product: "{{ product }}"
    distribution: "{{ distribution }}"
    build: "{{ build }}"
    rpm: "{{ rpm }}"
  register: routput

- debug: var=routput

- set_fact:
    rpmdir: "{{ routput.directory }}"

# Find all .goipath files and retrieve commit and ipprefix
- name: Find .goipath in the rpm
  find:
    paths: "{{ rpmdir }}"
    patterns: '.goipath'
    recurse: yes
    hidden: yes
  register: goipaths

- debug: var=goipaths

- fail:
    msg: "Single .goipath expected to be found. Got {{ goipaths.matched }} instead"
  when: goipaths.matched != 1

# glide.lock is expected to be in the same directory as a .goipath
- name: Collect all .goipaths
  set_fact:
    goipath: "{{ goipaths.files[0].path }}"
    hexsha: "{{ goipaths.files[0].path | goipath2hexsha }}"
    ipprefix: "{{ goipaths.files[0].path.split('src/')[-1] | dirname }}"
    codedir: "{{ goipaths.files[0].path | dirname }}"
    snapshotfile: "{{ (goipaths.files[0].path | dirname) + '/glide.lock' }}"

- debug: var=goipath
- debug: var=hexsha
- debug: var=ipprefix
- debug: var=snapshotfile

- name: Check if glide.lock file exists
  stat:
    path: "{{ snapshotfile }}"
  register: stat_result

- debug: var=stat_result

- fail:
    msg: "Unable to find {{ item.stat.path }} file"
  when: not stat_result.stat.exists

- name: Create working directory
  set_fact:
    extractor_wd: /tmp/test

- name: Create generated directory
  set_fact:
    generated_wd: "{{ extractor_wd }}/generated"

- include: retrievegostdlib.yml
  vars:
    generated_go_wd: "{{ generated_wd }}"
    goversion: "{{ goversion }}"

- name: Build dependency snapshot
  snapshotbuilder:
    snapshotfile: "{{ snapshotfile }}"
  register: output

- debug: var=output

- include: prepareextractorwd.yml

- set_fact:
    project_dir: "{{ extractor_wd }}/src/{{ ipprefix }}"

- name: Create GOPATH directory dirname for the project
  file:
    path: "{{ project_dir | dirname }}"
    state: directory

- name: Create GOPATH directory for the project
  file:
    src: "{{ codedir }}"
    dest: "{{ extractor_wd }}/src/{{ ipprefix }}"
    state: link

- name: Extract api
  apiextractor:
    gopath: "{{ extractor_wd }}"
    generated: "{{ generated_wd }}"
    package_path: "{{ ipprefix }}"
    hexsha: "{{ hexsha }}"
    depsfile: "{{ snapshotfile }}"
    cgodir: "{{ generated_wd }}/cgo.yml"
    goversion: "{{ goversion }}"
    artefact:
      prefix: golang-project-distribution
      key:
        product: "{{ product }}"
        distribution: "{{ distribution }}"
        build: "{{ build }}"
        rpm: "{{ rpm }}"
        hexsha: "{{ hexsha }}"

  register: eoutput

- debug: var=eoutput

# Store all artefacts
- name: Store api artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-distribution-api'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"

- name: Store contracts artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-distribution-contracts'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"

- name: Store static-allocations artefacts
  artefactwriter:
    artefact: "{{ item }}"
  with_items: "{{ eoutput.artefacts['golang-project-distribution-static-allocations'] }}"
  loop_control:
    label: "{{ item['ipprefix'] }}"
